(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[     87500,       1893]
NotebookOptionsPosition[     73545,       1641]
NotebookOutlinePosition[     78678,       1759]
CellTagsIndexPosition[     78468,       1750]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["Last modified on: Tuesday, July 10, 2018 at 2:17", \
"TemplateInstructions",
 Deployed->True,
 Background->RGBColor[0.75, 0.75, 0.75],
 CellTags->
  "LastModified",ExpressionUUID->"034f93bf-27ed-47fa-8658-94c423a379e8"],

Cell[CellGroupData[{

Cell["Author Info", "TemplateSectionHeaders",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellTags->
  "AuthorInfo",ExpressionUUID->"47541fce-e5a1-4793-b8e1-e1340b437ca6"],

Cell["Luis Antonio Vasquez Reina", "TemplateAuthorInfo",
 ShowCellBracket->False,
 CellFrameLabels->{{
    Cell["Name:", "TemplateLabel"], None}, {None, None}},
 CellFrameLabelMargins->{{35, 0}, {0, 
  0}},ExpressionUUID->"2214bf82-cb91-41b2-a79f-ecd872282532"],

Cell["Jonathan Gorard", "TemplateAuthorInfo",
 ShowCellBracket->False,
 CellFrameLabels->{{
    Cell["Mentor: ", "TemplateLabel"], None}, {None, None}},
 CellFrameLabelMargins->{{25, 0}, {0, 
  0}},ExpressionUUID->"1d803eb4-64f6-4601-a1a0-49b5afc9692c"],

Cell["Pontifical Catholic University of Peru - PUCP", "TemplateAuthorInfo",
 ShowCellBracket->False,
 CellFrameLabels->{{
    Cell["Affiliation: ", "TemplateLabel"], None}, {None, None}},
 CellFrameLabelMargins->{{8, 0}, {0, 
  0}},ExpressionUUID->"f3f2c56d-6554-49c0-a8f0-7c8d2bae5215"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Poster Session Content", "TemplateSectionHeaders",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellTags->
  "PosterContent",ExpressionUUID->"e3c11918-b62c-4e4f-bc19-a4aa32cba637"],

Cell["Symbolic Computation with Infinite Lists", "TemplateEditableContent",
 CellFrameLabels->{{
    Cell["Title of \nproject: ", "TemplateLabel"], None}, {None, None}},
 CellFrameLabelMargins->{{17, 0}, {0, 
  0}},ExpressionUUID->"16215b85-c481-4f11-8175-b0652d7bbfad"],

Cell[TextData[{
 "Computer languages are usually constrained to lists of finite size, which \
can be subjected to operations. For example, one may join, partition, sum, or \
nest them, and get a finite list as a result. \nEven though explicit infinite \
lists cannot be implemented in a computer, the goal I aim at in this project \
is to provide the Wolfram Language with a symbolic calculus for lists of \
infinite length.\nThat is, one would be able to treat expressions referring \
to infinite lists as arguments of operations. Imagine an infinite list which \
at position ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "556375c0-9efb-4244-8725-3a64ffe31b41"],
 " has ",
 Cell[BoxData[
  FormBox[
   SqrtBox["i"], TraditionalForm]],ExpressionUUID->
  "814988e6-fde7-4b80-9548-68f5c7005bd6"],
 " with ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "59d6a252-686b-45d4-a7fb-cf63457d9b53"],
 " in the natural numbers, extracting the first ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f43515be-d7fd-49da-be50-c39385a82b4d"],
 " elements of the list is a meaningful operation to do, and it gives the \
square roots of the first ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "8b272d7a-4424-4b3f-aae9-e5cfb97e86b5"],
 " natural numbers. The implementation of this kind of operation to the \
Wolfram Language is the objective of my project."
}], "TemplateEditableContent",
 InitializationCell->True,
 CellFrameLabels->{{
    Cell["Goal of \nthe \nproject: ", "TemplateLabel"], None}, {None, None}},
 CellFrameLabelMargins->{{18, 0}, {0, 
  0}},ExpressionUUID->"c662dd0a-9849-40e8-bc89-a9f688107475"],

Cell["\<\
Add the most representative image of your project here. (We recommend just 1 \
image, if you add more, we will make a collage of the images.)\
\>", "TemplateInstructions",
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"ec924e65-f9fc-4678-8fe3-95cd292f053c"],

Cell[BoxData[{
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
Xrd3HZxtF4t5DuqJMKbX5gDeI98AWpFxtGVeowrH8nPPMg61NCb7BeqJMlft
yb3ZJt8AWnq8J9k7V44zh1GB90vvJ9vIw7wGNUUZ1/Lu46LsQ6COtb5PzvE+
+QbZyTbep5/NQX2GmiL1qeaCYyLtQ6A+Ocd++mey04sds/Z+Dr1tLOoz1BRt
bMs43uccAxhFnX4u2hwL73D8nvdqLZztO47jG2paamwkjzXf2sjnou0/YD56
9XX6Z7Jy7LbzrE+zHm4cxzjUFbGmrvXJco51EfcfMCd1+lf6ZzJy3PZnTUd/
jnOoK9v5sfr/q2z7D6jPNclP+meyccyOp3724ViHurKObznHJ/MfENXsfXrW
+ZU5OV5jsabjWo53qCviMzjeMXPvfDPzbwdymDXn0D+ThWM1tllr6JUc81Bb
hXo5a92f8TcDec10PVL/TAaO0zys6WjHcQ+1VTpHni3nmOm3AnXM0KPrn4nO
MZqXNR3nOPahtopjfJaaP8NvBOqq/M6VinMrdWS/P5lP1nQcoz5DfVXnuOo5
R+XfBsyj4rVI/TNRVc4VZ1axjl5FfYb6KtfCyvW+4m8C5lWpXuufiUi2UZ81
Ha+pz1DfDDWwUt+8qPRbABYV6rX+mYgcl3ORdawzDqC+mcZ5hb55UeE3ADyT
tTefaV4lB8fk3LLW0isYCzCH2c6VK6zRnG2fAfPK1pvrn4nE8cjCmg7jAWYx
67ly5pxj1n0GzCtLzdY/E4VjkS2z5hzGBMxh9rGepWe+J98AZhX9XsPZ51Ri
cByyx2xrOowLmIOx/ilTfY/a1wP0EjXnMKcymmOQIzL1wUcZGzCPaP3hSBnq
u/oM8ClazqE+M5Ljj7Mqr+kwPmAeUfrCSCLXdvUZ4HcR6rb6zAjLcaefo6UI
NbUl9RnmYbxvi3RdcGF/AWwb2ZOrz/RW+Xo7MVQ5xtRnmIfM/7VIOYf6DPDa
iOdHq8/0cn/OGalHobbMOYf6DHMxL+4ToYdQnwH26/mMDvWZHtayDccdPWVc
06E+w1xGn7NnMzLnUJ8B3tcq5/jx8f2Pv//tL4c/cNRarhHhugtzi/ac5y36
Z5iLe1SOGVHP1WeA48724p8ZxV8PfeQbHPUs29ATEEH0NR36Z5iLfOO43rm1
+gzQxpFeXL7BSJ67QQYR13Ton2EuEetQNr22ofoM0NY7OYd8g5Hu3wUb9To5
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
1+HW+/V+PnfM0JPj7TjbDsYbcW3ZOfi15EhjWbMBPKM+X29ExnzVO1mWP9Nx
Q096yWNsMxhv5HmYnOMa5qQxrNkA9lpqtCy0vVHbtMc7Z80x9KSffJ/tBeNF
6K2cF7anvvZlzQbwDs9WaG90He75nA9zPD053vazrWC8SOdkntHRjvt1+5DN
Ae/Yei8G50SoxT37KXM8vY0eX1kYlzBepHxjcZ9zRPtumaix17m/TugYBd4h
32grSi0e9Twz6EW9es32gfEi9ATPyDmOi75vs4pwnRDITb7RRqR5btR3cfzQ
k7VDv7sf+56tBONlGX/OKY8xB7UT5RohUINncBwXtScYNefKyejN8fartXV5
0eoTzCLb+ZpndLxHfW0jai8N5GYNx/si1+OR+9FxRG9Rx+EI7jvM5cfH9z/+
/re/HP4QW7Z8YyHn2M82Os6aDeBq5rL9otfjCPsxwndgHurXp/vzErlPfJ8Z
xV8PfeQb8UXvFfZQS54z7xwT+RohUIs6/VqGfiXKfozyPZiDZ3J8km/kId+o
LUO/sJeass28s581G0Bvas62TFlzpLk2yzajjkjH/wjuTclDvlFbxZ7KvSu/
sy1+t3bsZ+qjgVrU6d9ly5uj7UO9EL3NfMzJN/KQb9SWqW94l5zji7WDv3rM
MbL10EA96vSvMtbkiPtv67jyfD2uMmvv7RpZHvKN2jL2D0e4dyVm3zXK4z2S
sx8bQAzqdO68OfL3fjy29PdcbcZ6pp/MQf2rLfJcfIWZc47Z9vWWx2dczzj/
AjHNvoYje94cfZ69P7b09/QwWz2b7fdmpf7VFn0uvkr2Huqo2evuWrYh4wAi
mbUeVehHMvyGZc7T39PLTH3WLL8zu1f179vP/fjtz32p/mWUYS6+0mzP6Jgx
01k8yzZmHwdALLPMSYsqNTjL75Bv0NssvfYMv7GCZ/VvyTXkG3llmYuvNlPO
McNvfLSWbTj2gahmqdPV1lJmmlfkG4xQvbZV/31VbNW/+0xDvpFXprm4l+rP
6Jit9t5nG453IIvqtbpatnGT6fkp8g1GyTJGjqj82ypZq3+PeYZ8Iy/ne9uq
5hyZ+q+zMj+HH5hb5TpduS5n2W/Prl8+u/dcf08LVddMV/xNFW3lG2sf9S+f
yj1GKxXvXan0W9ZUvC4IzKdCrb6vwzNkzln2meuXjFatt76p9nuq2rN+Tf3L
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
vgRtzTBPRv6N5lAiijpeIqs6lh0L77l/v7d8g6tEv26TWeSekbocd9BO1Z78
UcSaMcu2J6eIYyaqymO58m9r7T7buJFvcCU1+hpqHiNZywHnzTKGov3Oxz4Y
Ioo2bqKqPJb1+vusbSf5BldTo9uzTRnNWg44bqa+NdpvjfZ9YIs59rnqY1mf
9drWMdDq2b/wjPHZTvV6Ti7WcsD7ZqvjUWrEbNud/KKMnWhmGcv2/7ZZjgHi
cg7UTuW1eOTkGgPsN+N4ifB79cJkFWH8RDPLeLbvf7fs+xn2P/EZo+cZz0Qm
x4TXZqzjo3/zjJkStTh+v4yuJz3Z77/y/CQiMk7Pmammk5PzCHhu1vEx8nfr
h6lg1tpxb7YeQ9//RbZBZDPVpZbUODLZs5bj9gynM8+AgmxmruOj5v6Ztzn1
zN5DzzaeZ/u9W2wHopste23F2CabV2Pd+7uYzcx1fMRvn3l7U9esPfSs43nW
/b2Ydb+Tj/VF75EJkdnWWg75BjNRx/v26XpiKpuxlsx67jDjvl6o42Qz83h9
l/FNdmv3Tco3mIk63m/ed582M5ipj565fs60n+/NvM/JbdYx+y7biSru13LI
N5iJOt6vX9UXM4sZ6srs43mGfXxPPk0Fs43bd81e16npNu7lG8xCHf9y9Zxv
WzOb6n307GN6pt8v26CKPe9ZmJlxTlXyDWYxU3/6ypXzve3MrKr20cb0HNtg
yTWc81BJ1bp81gw1jXk95hvfftaBx498g+w8V/RXV81rtjOzq3a90Jj+UnU7
3Ocasg0qqjp2z5BvUNmz9RvPsg35Bpmo47+7Yr7XG0OtjEPt/FJln94s+/U+
16h03MIjx/YXdZ3q5BvMwLz2u9bbxHwJXyqcKxrTv8q+P++t5RryaaqrNIbP
UNupbivfeJVtyDfIQh1f13K72Mbwu+wZh/PdX1XbHrINZuM4d88hc5BvUJ1z
720t5jjbF7ZlzTiM699V2iZr96bADGY/1ivVMdiylm/syTbkG2Qgp36uxbZx
PQSeuz9/zFCT9L/rqmyX5XfcP4Ojwu+CvaLX4CvN/NuZh3yDyqr0o1c529fa
vrDP/Xlk9PNJ43pb9nODtX1rXzOj7GP5CLWdWTx7vqh8g+xmnL/eceZasnkS
3vN4T0BExvVzUffbHvYtfMmwlq616Nk6tCLfoCq93D5H5nfbFvbbeg9ntN56
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAQGP/E+8PTHw=
    "], {{0, 764}, {1080, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{408.181818181818, Automatic},
  ImageSizeRaw->{1080, 764},
  PlotRange->{{0, 1080}, {0, 764}}], "\[IndentingNewLine]", 
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmJiYGDgBmJ5IGZgZAQhnBSIwEOBGYw4KQYwwEkNV7sBA34CkQ==

   "], {{0, 0}, {31, 11}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{408.18181818181836`, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}], "\[IndentingNewLine]", 
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmJiYGDgBmJ5IGZgBEIwgZ1iBGE8FIjESYEQxA7sFAjhpkBmgNTh
oMB2MOCkaOoxRqgDcFAA/5cClw==
   "], {{0, 0}, {31, 11}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageMargins->{{8.526512829121202*^-14, 0.}, {0., 0.}},
  ImageSize->{409.09090909091424`, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]}], "TemplateEditableContent",
 CellFrameLabels->{{
    Cell["Image: ", "TemplateLabel"], None}, {None, None}},
 CellFrameLabelMargins->{{20, 0}, {0, 
  0}},ExpressionUUID->"32f16ef4-646e-45ed-a15a-a912cfc9ecd6"],

Cell["\<\
I have extended most of the basic Mathematica functions for lists to infinite \
lists through symbolic manipulation, though partial explicit numerical \
results can be obtained.
Two non trivial applications of this results are the capacity to define \
infinite graphs, and to work with Cellular Automata with an infinite initial \
condition.\
\>", "TemplateEditableContent",
 CellFrameLabels->{{
    Cell["Summary \nof Results: ", "TemplateLabel"], None}, {None, None}},
 CellFrameLabelMargins->{{5, 0}, {0, 
  0}},ExpressionUUID->"ba2205bf-d701-4ef5-aa12-c7a7f1002441"],

Cell["\<\
It is still pendant to extend other Mathematica functions for finite lists to \
work with this project\[CloseCurlyQuote]s approach for infinite lists in an \
optimal way. Also, an implementation could be explored for systems that in \
principle accept infinite initial conditions.
\
\>", "TemplateEditableContent",
 CellFrameLabels->{{
    Cell["Future \nwork: ", "TemplateLabel"], None}, {None, None}},
 CellFrameLabelMargins->{{20, 0}, {0, 
  0}},ExpressionUUID->"e44105f6-e95a-4d28-9e4d-8a40b3d4e596"],

Cell[BoxData[""], "Input",
 CellOpen->False,ExpressionUUID->"4a721f19-623c-47ad-bb58-c6de867557f0"],

Cell[TextData[{
 StyleBox["Note",
  FontWeight->"Bold"],
 ": Everything above this bar is your poster.Make sure it fits on a single \
page. ",
 Cell[BoxData[
  ButtonBox["\<\"Preview Poster\"\>",
   Appearance->Automatic,
   ButtonFunction:>With[{$CellContext`authorInfo = NotebookImport[
        EvaluationNotebook[], "TemplateAuthorInfo"], $CellContext`content = 
      NotebookImport[
        EvaluationNotebook[], "TemplateEditableContent"]}, 
     CreateDocument[
      Notebook[{
        Cell[
         Part[$CellContext`content, 1], "Title", FontColor -> 
         RGBColor[
          0.25098039215686274`, 0.25098039215686274`, 0.25098039215686274`], 
         TextAlignment -> Center], 
        Cell[
         TextData[{
           Part[$CellContext`authorInfo, 1], " (", 
           StyleBox["Mentor", Bold], ": ", 
           Part[$CellContext`authorInfo, 2], ")"}], "Text", TextAlignment -> 
         Center], 
        Cell[
         Part[$CellContext`authorInfo, 3], "Text", TextAlignment -> Center], 
        Cell[
         Part[$CellContext`content, 3], TextAlignment -> Center], 
        Cell[
         TextData[
          StyleBox["Goal", FontWeight -> Bold]], "Text"], 
        Cell[
         Part[$CellContext`content, 1], "Text"], 
        Cell[
         TextData[
          StyleBox["Summary of Results", FontWeight -> Bold]], "Text"], 
        Cell[
         Part[$CellContext`content, 4], "Text"], 
        Cell[
         TextData[
          StyleBox["Future Work", FontWeight -> Bold]], "Text"], 
        Cell[
         Part[$CellContext`content, 5], "Text"]}, WindowSize -> {550, 650}, 
       ScreenStyleEnvironment -> "Printout", ShowPageBreaks -> True, 
       PrintingOptions -> {"PaperOrientation" -> "Portrait"}, 
       WindowFrameElements -> {"CloseBox"}]]],
   Evaluator->Automatic,
   Method->"Queued"]],ExpressionUUID->"deee04eb-f07d-48ae-9b32-a1e3512be1e2"]
}], "TemplateDivider",
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"f97819d1-7e79-4a5e-9921-90745ea05a94"]
}, Open  ]],

Cell[CellGroupData[{

Cell["End of School Presentation Content", "TemplateSectionHeaders",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellTags->
  "PresentationContent",ExpressionUUID->"8e028c0c-7cb5-4cea-9aaf-\
57044e03e425"],

Cell[TextData[{
 Cell["\<\
In addition to the poster content, include other content to present at the 2 \
minute presentation for end of school. Use the buttons below to add more \
sections.\
\>", "Text",ExpressionUUID->"36bb9e60-8d73-47a8-8a18-581b097aa5c4"],
 Cell[BoxData[
  TemplateBox[{ButtonBox["\"Add Header\"", ButtonFunction :> NotebookWrite[
       InputNotebook[], 
       Cell["Section Header", "TemplateEditableHeader"]], Appearance -> 
     Automatic, Evaluator -> Automatic, Method -> "Preemptive"],ButtonBox[
    "\"Add Text\"", ButtonFunction :> NotebookWrite[
       InputNotebook[], {
        Cell[
        "Type text here", "TemplateEditableContent", 
         CellMargins -> {{65, 20}, {10, 10}}, ShowCellBracket -> True]}], 
     Appearance -> Automatic, Evaluator -> Automatic, Method -> "Preemptive"],
    ButtonBox["\"Add Code or Image\"", ButtonFunction :> NotebookWrite[
       InputNotebook[], 
       Cell[
        ExpressionCell[123], "TemplateEditableInput", 
        CellMargins -> {{65, 20}, {10, 10}}, ShowCellBracket -> True]], 
     Appearance -> Automatic, Evaluator -> Automatic, Method -> "Preemptive"]},
   "RowDefault"]],ExpressionUUID->"6fd17dbc-b056-4736-99ad-b691cb8932d7"]
}], "TemplateInstructions",
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"a415c0fc-f692-474a-a3a1-95fb4df9ef20"],

Cell[CellGroupData[{

Cell["Basic Operations with Infinite Lists", "TemplateEditableHeader",ExpressionUUID->"a82eb68b-c55f-495d-ac5a-d97167784e73"],

Cell["\<\
Many of the basic operations on lists now have a version for infinite lists!\
\>", "TemplateEditableContent",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 
  10}},ExpressionUUID->"56b47864-14c8-4a9a-89ba-c44c959ed481"],

Cell["\<\
First, I import the package and define the infinite list of the cubes of the \
integer\
\>", "TemplateEditableContent",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 
  10}},ExpressionUUID->"1b26b797-093a-4576-b940-30075ca455e9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", "[", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<InfiniteLists.m\>\""}], "}"}], "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cubes", "=", 
    RowBox[{"InfiniteList", "[", 
     RowBox[{"0", ",", 
      RowBox[{"x", "\[Function]", 
       RowBox[{"x", "^", "3"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "showing", " ", "the", " ", "first", " ", "five", " ", "element", " ", 
    "on", " ", "both", " ", "sides"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"InfiniteTake", "[", 
  RowBox[{"cubes", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], "TemplateEditableInput",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 10}},
 CellLabel->"In[1]:=",ExpressionUUID->"2409bf27-2c9c-45af-8774-7a18480bfb95"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "125"}], ",", 
   RowBox[{"-", "64"}], ",", 
   RowBox[{"-", "27"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "1"}], ",", "0", ",", "1", ",", "8", ",", "27", ",", "64", 
   ",", "125"}], "}"}]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"5ea5b50a-3076-4899-8b2d-d94c0caec004"]
}, Open  ]],

Cell["One can reverse this list, or drop all the negative cubes.", \
"TemplateEditableContent",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 
  10}},ExpressionUUID->"50e2ab33-924e-4422-856b-913a68a559c5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"InfiniteReverse", "[", "cubes", "]"}], "//", 
  RowBox[{
   RowBox[{"InfiniteTake", "[", 
    RowBox[{"#", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}], 
   "&"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InfiniteDrop", "[", 
   RowBox[{"cubes", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "Infinity"}], ",", 
      RowBox[{"-", "1"}]}], "}"}]}], "]"}], "//", 
  RowBox[{
   RowBox[{"InfiniteTake", "[", 
    RowBox[{"#", ",", "5"}], "]"}], "&"}]}]}], "TemplateEditableInput",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 10}},
 CellLabel->"In[4]:=",ExpressionUUID->"7235a235-7eb7-41f3-9a40-9d2099542791"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"125", ",", "64", ",", "27", ",", "8", ",", "1", ",", "0", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "27"}], ",", 
   RowBox[{"-", "64"}], ",", 
   RowBox[{"-", "125"}]}], "}"}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"ff30ec4f-f9d4-4b57-89eb-e8e23a615ee5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "8", ",", "27", ",", "64", ",", "125"}], "}"}]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"56a9964f-2570-493e-b1a5-4064f6af0e4a"]
}, Open  ]],

Cell["\<\
Here, I make the range from 1 to infinity, and select the infinite list of \
the primes\
\>", "TemplateEditableContent",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 
  10}},ExpressionUUID->"e6e6e936-631f-4952-9887-6c91bdd7ac0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"InfiniteSelect", "[", " ", 
   RowBox[{
    RowBox[{"InfiniteRange", "[", 
     RowBox[{"1", ",", "Infinity"}], "]"}], ",", "PrimeQ"}], "]"}], " ", "//", 
  RowBox[{
   RowBox[{"InfiniteTake", "[", 
    RowBox[{"#", ",", "5"}], "]"}], "&"}]}]], "TemplateEditableInput",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 10}},
 CellLabel->"In[4]:=",ExpressionUUID->"18bdb0de-d0a7-49de-b169-6f483968bf74"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "5", ",", "7", ",", "11"}], "}"}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"f3aeaefa-c67f-49fd-88c5-6ae845a66f38"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Matrices and graphs", "TemplateEditableHeader",ExpressionUUID->"d81a2f92-5f84-4614-aee9-dcb6b7eeac79"],

Cell["\<\
With the help of infinite lists, it is possible to work with matrices, which \
are nested infinite lists.\
\>", "TemplateEditableContent",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 
  10}},ExpressionUUID->"23477ba0-6c9e-4f95-8724-06f6fa7e26ea"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"myInfiniteMatrix", "=", "\[IndentingNewLine]", 
    RowBox[{"InfiniteMatrix", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", "j"}], "}"}], "\[Function]", 
      RowBox[{"\"\<[row \>\"", "<>", 
       RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<,col \>\"", "<>", 
       RowBox[{"ToString", "[", "j", "]"}], "<>", "\"\<]\>\""}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Take", " ", "the", " ", "first", " ", "rows", " ", "and", " ", 
    "columns"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InfiniteTake", "[", 
   RowBox[{"myInfiniteMatrix", ",", "2", ",", "3"}], "]"}], "//", 
  "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InfiniteTake", "[", 
   RowBox[{"myInfiniteMatrix", ",", "4", ",", "4"}], "]"}], "//", 
  "MatrixForm"}]}], "TemplateEditableInput",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 10}},
 CellLabel->"In[4]:=",ExpressionUUID->"e6c6389e-6c27-45e2-98d2-b9616e2d15e2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"\<\"[row 1,col 1]\"\>", "\<\"[row 1,col 2]\"\>", "\<\"[row 1,col \
3]\"\>"},
     {"\<\"[row 2,col 1]\"\>", "\<\"[row 2,col 2]\"\>", "\<\"[row 2,col \
3]\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[5]//MatrixForm=",ExpressionUUID->"73937141-e65d-4f43-932f-\
2b7531b3c8f1"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"\<\"[row 1,col 1]\"\>", "\<\"[row 1,col 2]\"\>", "\<\"[row 1,col \
3]\"\>", "\<\"[row 1,col 4]\"\>"},
     {"\<\"[row 2,col 1]\"\>", "\<\"[row 2,col 2]\"\>", "\<\"[row 2,col \
3]\"\>", "\<\"[row 2,col 4]\"\>"},
     {"\<\"[row 3,col 1]\"\>", "\<\"[row 3,col 2]\"\>", "\<\"[row 3,col \
3]\"\>", "\<\"[row 3,col 4]\"\>"},
     {"\<\"[row 4,col 1]\"\>", "\<\"[row 4,col 2]\"\>", "\<\"[row 4,col \
3]\"\>", "\<\"[row 4,col 4]\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[6]//MatrixForm=",ExpressionUUID->"4bd207e9-4e39-4e0d-a5ab-\
33ee92acc437"]
}, Open  ]],

Cell["\<\
Infinite matrices allow us to work with infinite graphs!
We can consider the graph with vertices the natural numbers, and where every \
number is connected its divisors\
\>", "TemplateEditableContent",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 
  10}},ExpressionUUID->"4d8b4c02-8b9b-4a8a-a299-0c5e298f67be"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"myGraphMatrix", "=", 
   RowBox[{"InfiniteMatrix", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "\[Function]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Mod", "[", 
         RowBox[{"x", ",", "y"}], "]"}], "\[Equal]", "0"}], ",", "1", ",", 
       "0"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"GraphPlot", "[", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InfiniteTake", "[", 
      RowBox[{"myGraphMatrix", ",", "n", ",", "n"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"VertexLabeling", "\[Rule]", "True"}], ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"n", ",", "4", ",", "9"}], "}"}]}], 
  "]"}]}], "TemplateEditableInput",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 10}},
 CellLabel->"In[40]:=",ExpressionUUID->"20197eb1-0a2c-4e3a-a068-01939f0a01f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[
     GraphicsComplexBox[{{1.1141060919809997`, 0.42373938770793124`}, {
      2.031093212295816, 0.}, {0., 0.42364103879064774`}, {2.031481386203642, 
      0.8470830608194897}}, {
       {RGBColor[0.5, 0., 0.], Arrowheads[{{0.03365789097068841, 0.7}}], 
        ArrowBox[{2, 1}], ArrowBox[{3, 1}], ArrowBox[{4, 1}], 
        ArrowBox[{4, 2}]}, {InsetBox[
         FrameBox["1",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 1], InsetBox[
         FrameBox["2",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 2], InsetBox[
         FrameBox["3",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 3], InsetBox[
         FrameBox["4",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 4]}}],
     Annotation[#, 
      VertexCoordinateRules -> {{1.1141060919809997`, 0.42373938770793124`}, {
       2.031093212295816, 0.}, {0., 0.42364103879064774`}, {2.031481386203642,
        0.8470830608194897}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]], ",", 
   GraphicsBox[
    TagBox[
     GraphicsComplexBox[{{0.7371789453155361, 0.8059778623701405}, {
      1.6800871361765972`, 0.43232437440949273`}, {0.0006249958503357078, 
      0.}, {1.6800704750705713`, 1.1796403948693213`}, {0., 
      1.611343010753724}}, {
       {RGBColor[0.5, 0., 0.], Arrowheads[{{0.03591505553075059, 0.7}}], 
        ArrowBox[{2, 1}], ArrowBox[{3, 1}], ArrowBox[{4, 1}], 
        ArrowBox[{4, 2}], ArrowBox[{5, 1}]}, {InsetBox[
         FrameBox["1",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 1], InsetBox[
         FrameBox["2",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 2], InsetBox[
         FrameBox["3",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 3], InsetBox[
         FrameBox["4",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 4], InsetBox[
         FrameBox["5",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 5]}}],
     Annotation[#, 
      VertexCoordinateRules -> {{0.7371789453155361, 0.8059778623701405}, {
       1.6800871361765972`, 0.43232437440949273`}, {0.0006249958503357078, 
       0.}, {1.6800704750705713`, 1.1796403948693213`}, {0., 
       1.611343010753724}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]], ",", 
   GraphicsBox[
    TagBox[
     GraphicsComplexBox[{{1.2024578072617547`, 1.0639745057278236`}, {
      2.044911970706236, 1.5354853538633957`}, {1.4836721333413125`, 0.}, {
      1.4499910344990816`, 2.1353839779329107`}, {0., 1.0464800647172359`}, {
      2.0595012804263666`, 0.6188721449341319}}, {
       {RGBColor[0.5, 0., 0.], Arrowheads[{{0.033056459260506876`, 0.7}}], 
        ArrowBox[{2, 1}], ArrowBox[{3, 1}], ArrowBox[{4, 1}], 
        ArrowBox[{4, 2}], ArrowBox[{5, 1}], ArrowBox[{6, 1}], 
        ArrowBox[{6, 2}], ArrowBox[{6, 3}]}, {InsetBox[
         FrameBox["1",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 1], InsetBox[
         FrameBox["2",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 2], InsetBox[
         FrameBox["3",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 3], InsetBox[
         FrameBox["4",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 4], InsetBox[
         FrameBox["5",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 5], InsetBox[
         FrameBox["6",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 6]}}],
     Annotation[#, 
      VertexCoordinateRules -> {{1.2024578072617547`, 1.0639745057278236`}, {
       2.044911970706236, 1.5354853538633957`}, {1.4836721333413125`, 0.}, {
       1.4499910344990816`, 2.1353839779329107`}, {0., 1.0464800647172359`}, {
       2.0595012804263666`, 0.6188721449341319}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]], ",", 
   GraphicsBox[
    TagBox[
     GraphicsComplexBox[{{0.914444406939332, 1.005227665316271}, {
      0.002318550942209008, 1.4149359954555878`}, {0.4663348675311936, 0.}, {
      0.47097617423765425`, 2.011740859886916}, {1.8953528265412032`, 
      1.6510884581093825`}, {0., 0.5986720617684426}, {1.8935758737056076`, 
      0.35588091184022475`}}, {
       {RGBColor[0.5, 0., 0.], Arrowheads[{{0.03377530980740994, 0.7}}], 
        ArrowBox[{2, 1}], ArrowBox[{3, 1}], ArrowBox[{4, 1}], 
        ArrowBox[{4, 2}], ArrowBox[{5, 1}], ArrowBox[{6, 1}], 
        ArrowBox[{6, 2}], ArrowBox[{6, 3}], ArrowBox[{7, 1}]}, {InsetBox[
         FrameBox["1",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 1], InsetBox[
         FrameBox["2",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 2], InsetBox[
         FrameBox["3",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 3], InsetBox[
         FrameBox["4",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 4], InsetBox[
         FrameBox["5",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 5], InsetBox[
         FrameBox["6",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 6], InsetBox[
         FrameBox["7",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 7]}}],
     Annotation[#, 
      VertexCoordinateRules -> {{0.914444406939332, 1.005227665316271}, {
       0.002318550942209008, 1.4149359954555878`}, {0.4663348675311936, 0.}, {
       0.47097617423765425`, 2.011740859886916}, {1.8953528265412032`, 
       1.6510884581093825`}, {0., 0.5986720617684426}, {1.8935758737056076`, 
       0.35588091184022475`}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]], ",", 
   GraphicsBox[
    TagBox[
     GraphicsComplexBox[{{1.2461602493246229`, 1.1006864582507632`}, {
      2.10154016751119, 0.7983685602949333}, {0.8098272677820844, 0.}, {
      2.0285227788006486`, 1.7109470376282943`}, {0., 1.1591516282050631`}, {
      1.5641282678833572`, 0.10526761815971308`}, {0.6649169455423511, 
      2.2109868244916733`}, {2.4873987615037394`, 1.3348659405815544`}}, {
       {RGBColor[0.5, 0., 0.], Arrowheads[{{0.031206243187828633`, 0.7}}], 
        ArrowBox[{2, 1}], ArrowBox[{3, 1}], ArrowBox[{4, 1}], 
        ArrowBox[{4, 2}], ArrowBox[{5, 1}], ArrowBox[{6, 1}], 
        ArrowBox[{6, 2}], ArrowBox[{6, 3}], ArrowBox[{7, 1}], 
        ArrowBox[{8, 1}], ArrowBox[{8, 2}], ArrowBox[{8, 4}]}, {InsetBox[
         FrameBox["1",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 1], InsetBox[
         FrameBox["2",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 2], InsetBox[
         FrameBox["3",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 3], InsetBox[
         FrameBox["4",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 4], InsetBox[
         FrameBox["5",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 5], InsetBox[
         FrameBox["6",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 6], InsetBox[
         FrameBox["7",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 7], InsetBox[
         FrameBox["8",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 8]}}],
     Annotation[#, 
      VertexCoordinateRules -> {{1.2461602493246229`, 1.1006864582507632`}, {
       2.10154016751119, 0.7983685602949333}, {0.8098272677820844, 0.}, {
       2.0285227788006486`, 1.7109470376282943`}, {0., 1.1591516282050631`}, {
       1.5641282678833572`, 0.10526761815971308`}, {0.6649169455423511, 
       2.2109868244916733`}, {2.4873987615037394`, 1.3348659405815544`}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]], ",", 
   GraphicsBox[
    TagBox[
     GraphicsComplexBox[{{1.115944899642637, 1.0510000885747637`}, {
      1.9321212518713067`, 0.5477098460360061}, {0.518387577677496, 
      0.09303997750096216}, {2.0713627099062633`, 1.4122820886387804`}, {
      0.12919499349845265`, 1.83241463925389}, {1.2953093123359338`, 0.}, {
      1.1269528742337256`, 2.316416686224585}, {2.405615939405802, 
      0.960644606437543}, {0., 0.5893844090336053}}, {
       {RGBColor[0.5, 0., 0.], Arrowheads[{{0.03161227493948683, 0.7}}], 
        ArrowBox[{2, 1}], ArrowBox[{3, 1}], ArrowBox[{4, 1}], 
        ArrowBox[{4, 2}], ArrowBox[{5, 1}], ArrowBox[{6, 1}], 
        ArrowBox[{6, 2}], ArrowBox[{6, 3}], ArrowBox[{7, 1}], 
        ArrowBox[{8, 1}], ArrowBox[{8, 2}], ArrowBox[{8, 4}], 
        ArrowBox[{9, 1}], ArrowBox[{9, 3}]}, {InsetBox[
         FrameBox["1",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 1], InsetBox[
         FrameBox["2",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 2], InsetBox[
         FrameBox["3",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 3], InsetBox[
         FrameBox["4",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 4], InsetBox[
         FrameBox["5",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 5], InsetBox[
         FrameBox["6",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 6], InsetBox[
         FrameBox["7",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 7], InsetBox[
         FrameBox["8",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 8], InsetBox[
         FrameBox["9",
          Background->RGBColor[1, 1, 0.8],
          FrameStyle->RGBColor[0.94, 0.85, 0.36],
          StripOnInput->False], 9]}}],
     Annotation[#, 
      VertexCoordinateRules -> {{1.115944899642637, 1.0510000885747637`}, {
       1.9321212518713067`, 0.5477098460360061}, {0.518387577677496, 
       0.09303997750096216}, {2.0713627099062633`, 1.4122820886387804`}, {
       0.12919499349845265`, 1.83241463925389}, {1.2953093123359338`, 0.}, {
       1.1269528742337256`, 2.316416686224585}, {2.405615939405802, 
       0.960644606437543}, {0., 0.5893844090336053}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]]}], "}"}]], "Output",
 CellLabel->"Out[41]=",ExpressionUUID->"ffe90935-707e-4652-9630-e509b3eb0f80"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Applications to Cellular Automata", "TemplateEditableHeader",ExpressionUUID->"61810600-9282-48fb-96ce-99ccd72da419"],

Cell["\<\
A neat application is that now we can have Cellular Automata that admit \
infinite initial conditions!
For example, rule 90 gives interesting results:\
\>", "TemplateEditableContent",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 
  10}},ExpressionUUID->"e97d439e-5954-4a5c-a974-f45fb0428c37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Initial", " ", "condition", " ", "with", " ", "a", " ", "black", " ", 
    "cell", " ", "every", " ", "7", " ", "cells"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"myInitialCondition", "=", 
     RowBox[{"InfiniteList", "[", 
      RowBox[{"0", ",", 
       RowBox[{"x", "\[Function]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Mod", "[", 
            RowBox[{"x", ",", "7"}], "]"}], "\[Equal]", "0"}], ",", "1", ",", 
          "0"}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "With", " ", "a", " ", "widht", " ", "of", " ", "40", " ", "cells", " ", 
      "to", " ", "either", " ", "side"}], ",", " ", 
     RowBox[{"plot", " ", "the", " ", "first", " ", "10", " ", "steps"}]}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"InfiniteCellularAutomatonPlot1", "[", 
    RowBox[{"90", ",", "myInitialCondition", ",", "40", ",", "10"}], 
    "]"}]}]}]], "TemplateEditableInput",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 10}},
 CellLabel->"In[4]:=",ExpressionUUID->"e7a18002-89b1-408e-9a4f-c8f628bdba2d"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmJiYGDgBuJAIGYEIUaqUiBEXQpsNvUoBoi/qUgxQgKSahTYTEYq
UmAWIxWpkZdsIF6nIgUASOsEAQ==
   "], {{0, 0}, {81, 11}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{607.2727272727263, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"fec342a1-76e5-4b72-ab47-502635fb1704"]
}, Open  ]],

Cell["\<\
There are differences  if one uses the implemented Cellular Automata function \
with a similar but finite initial condition. Notice the extremes of the \
images below.\
\>", "TemplateEditableContent",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 
  10}},ExpressionUUID->"63fbb615-04d3-4733-b50d-dac315658189"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"with", " ", "infinite", " ", "initial", " ", "condition"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmJiYGDgBuJAIGYEIUaqUiBEXQpsNvUoBoi/qUgxQgKSahTYTEYq
UmAWIxWpkZdsIF6nIgUASOsEAQ==
     "], {{0, 0}, {81, 11}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->{590.909090909095, Automatic},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"with", " ", "finite", " ", "initial", " ", "condition"}], "*)"}],
    "\[IndentingNewLine]", 
   GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmJiYGDgBuJAIGZghEAoxUAuBTcAxARjGINcCsGAmIlgkEtBGWBP
QwEjZRSUAXE2BFNIQU2COBtsNKUUPFIYIRZQTsEjhYL0gp56KE8v6KmH8vSC
nnoQJlOFAgBnUwQR
     "], {{0, 0}, {81, 11}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageMargins->0.,
    ImageSize->{588.0000000000005, Automatic},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
      Automatic}]}]}]], "TemplateEditableInput",
 ShowCellBracket->True,
 CellMargins->{{65, 20}, {10, 
  10}},ExpressionUUID->"53b08af9-79c6-4ce8-b2f3-6babfb5ac393"],

Cell[BoxData[""], "Input",
 CellOpen->False,ExpressionUUID->"5ddaca3b-16c4-4ddd-a510-a603177f7695"],

Cell[TextData[{
 StyleBox["Note",
  FontWeight->"Bold"],
 ": Everything above this bar is in your 2 minute presentation. Make sure it \
fits on 2 slides. ",
 Cell[BoxData[
  ButtonBox["\<\"Preview Presentation\"\>",
   Appearance->Automatic,
   ButtonFunction:>With[{$CellContext`authorInfo = NotebookImport[
        EvaluationNotebook[], "TemplateAuthorInfo"], $CellContext`content = 
      NotebookImport[
        EvaluationNotebook[], 
        Alternatives[
        "TemplateEditableHeader", "TemplateEditableInput", 
         "TemplateEditableContent"]]}, 
     CreateDocument[
      Notebook[{
        Cell[
        "Wolfram Summer School 2018", FontFamily -> "Source Sans Pro", 
         FontSize -> 42, FontVariations -> {"CapsType" -> "AllCaps"}, 
         RGBColor[
         0.25098039215686274`, 0.25098039215686274`, 0.25098039215686274`], 
         Background -> RGBColor[1., 0.807843137254902, 0.2549019607843137], 
         PageWidth -> WindowWidth, ShowCellBracket -> False, 
         CellMargins -> {{0, 0}, {0, 0}}, 
         CellBracketOptions -> {"OverlapContent" -> True}], 
        Cell[
        "Title", "Title", FontColor -> 
         RGBColor[
          0.25098039215686274`, 0.25098039215686274`, 0.25098039215686274`], 
         CellMargins -> {{Inherited, 10}, {10, 10}}], 
        Cell[
         TextData[{
           StyleBox["AUTHOR: ", "Bold", 
            RGBColor[1., 0.5058823529411764, 0.]], 
           Part[$CellContext`authorInfo, 1], " (Mentor: ", 
           Part[$CellContext`authorInfo, 2], ")"}], "Text"], 
        Cell[
         TextData[{
           StyleBox["AFFILIATION: ", "Bold", 
            RGBColor[1., 0.5058823529411764, 0.]], 
           Part[$CellContext`authorInfo, 3]}], "Text"], 
        Cell[
         Part[$CellContext`content, 3], TextAlignment -> Center], 
        Cell[
         TextData[{
           StyleBox["GOAL OF THE PROJECT: ", "Bold", 
            RGBColor[1., 0.5058823529411764, 0.]], 
           Part[$CellContext`content, 2]}], "Text"], 
        Cell["", "SlideShowNavigationBar", CellTags -> "SlideShowHeader"], 
        Cell[
         TextData[{
           StyleBox["SUMMARY OF RESULTS: ", "Bold", 
            RGBColor[1., 0.5058823529411764, 0.]], 
           Part[$CellContext`content, 4]}], "Text"], 
        Cell[
         TextData[{
           StyleBox["ADDITIONAL CONTENT: ", "Bold", 
            RGBColor[1., 0.5058823529411764, 0.]]}], "Text"], 
        Apply[Sequence, 
         Map[Cell[#, "Text"]& , 
          Part[$CellContext`content, 
           Span[6, All]]]], 
        Cell[
         TextData[{
           StyleBox["FUTURE WORK: ", "Bold", 
            RGBColor[1., 0.5058823529411764, 0.]], 
           Part[$CellContext`content, 5]}], "Text"]}, ScreenStyleEnvironment -> 
       "SlideShow", WindowSize -> {1024, 740}]]],
   Evaluator->Automatic,
   Method->"Queued"]],ExpressionUUID->"c20b8022-a781-4e4e-a5c0-6a405440c0ea"]
}], "TemplateDivider",
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"076ddf5c-307b-4320-9bc6-9a3254f2388c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Detailed Project Notes", "TemplateSectionHeaders",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellTags->
  "ProjectNotes",ExpressionUUID->"d0702cda-4649-4987-a5e2-607be4aa4f6e"],

Cell[CellGroupData[{

Cell["Main Results in Detail", "Subsubsection",ExpressionUUID->"c1b785be-a60a-40fe-b1f1-2d83590b38cd"],

Cell["One can load the package with the following command:", "Text",ExpressionUUID->"8215d1a9-0153-4e24-b3a5-80897879c626"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     "\"\<InfiniteLists.m\>\""}], "}"}], "]"}], "]"}]], "Input",ExpressionUUID\
->"fcfaa886-4c4d-4f7b-8d31-4f5b492eb2d2"],

Cell[TextData[StyleBox["General Introduction",
 FontWeight->"Bold"]], "Text",ExpressionUUID->"47c865f1-e1e9-4c0a-b68b-e1f1e5d55fa7"],

Cell["\<\
Main idea: Infinite lists are treated as symbolical objects within the \
Wolfram Language. All infinite lists are countable infinite. An infinite list \
consists of two components, a direction and a rule that generates its \
elements. Elements can be of any Head.
With this approach, one can think of the infinite list as \
\[OpenCurlyDoubleQuote]lazily\[CloseCurlyDoubleQuote] implemented, i.e,  \
values are only computed when explicitly asked for. 
By far, the most complicated part of the project was to figure out the \
constructions needed for the generating rules for the new infinite lists that \
result from manipulating (applying functions) to infinite lists.
Note that, thanks to functions that insert a finite amount of elements to the \
list, strictly speaking the generating rule is only needed for the elements \
in the tail of the infinite list.
After the basic implementation was completed, infinite matrices were quickly \
available, via nesting of infinite lists and some modification of the already \
implemented functions of the project. With this,  the implementation of \
graphs with an infinite number of nodes and infinite adjacent matrices was \
possible. 
1- dimensional Cellular Automata with infinite initial conditions become \
available. Though the implementation here is still inefficient, it respects \
the spirit of cellular automata, which is that the value of a cell depends \
locally on the cells above it.\
\>", "Text",ExpressionUUID->"82d754bf-3232-45a9-92bd-0f4c60d4c847"],

Cell[TextData[StyleBox["Technical Introduction",
 FontWeight->"Bold"]], "Text",ExpressionUUID->"9be51f3b-065b-4fd2-a98a-\
939cc13bf81d"],

Cell[TextData[{
 "Infinite lists are objects: InfiniteList[direction,rule].\nThere are three \
types of infinite lists:\ndirection 1 lists  : open on the right side, closed \
on the left side. \tExample: {1,2,3,4,5,....}\ndirection -1 lists: open on \
the left side, closed on the right side. \tExample: {....,-5,-4,-3,-2,-1}\n\
direction 0 lists  : open on both sides: \t\t\t\t\t\tExample: \
{...,-3,-2,-1,0,1,2,---}\n\nMost functions take one or more infinite lists as \
input and return an infinite list as output. Some of these operations change \
the direction and most of them change the generating rule.\n\n",
 StyleBox["List of all functions and objects implemented:",
  FontWeight->"Bold"],
 "\n(Still inefficient implementations are marked with \
\[OpenCurlyDoubleQuote] * \[CloseCurlyDoubleQuote]. A \
\[OpenCurlyDoubleQuote]-\[CloseCurlyDoubleQuote] is added for ease of \
reading, but is not included in the name of the function or object )\n\n\
Infinite-List\nInfinite-Prepend\nInfinite-Append\nInfinite-Part\n\
Infinite-Take\nInfinite-Length\nInfinite-Drop\nInfinite-First\nInfinite-Last\n\
Infinite-Direction\nInfinite-Range\nInfinite-Reverse\nInfinite-Join\n\
Infinite-RealDigits*\nInfinite-Rest\nInfinite-Most\nInfinite-Riffle\n\
Infinite-SelectRule\nInfinite-Select*\nInfinite-Cases*\nInfinite-Rule\n\
Infinite-FirstPosition\nInfinite-Unequal\nInfinite-Plus\nInfinite-Times\n\
Infinite-Sum\nInfinite-Unequal*\nInfinite-And\nInfinite-And2*\nInfinite-Or\n\
Infinite-Matrix\nInfinite-MatrixPlus\nInfinite-MatrixTimes\n\
Infinite-PolyTimes\nInfinite-CellularAutomatonStep*\n\
Infinite-CellularAutomaton\nInfinite-CellularAutomatonData1*\n\
Infinite-CellularAutomatonPlot1*\nInfinite-CellularAutomatonData2\n\
Infinite-CellularAutomatonPlot2\n\nA lot of functions return a Failure object \
if they are called with the wrong arguments.\nSpecifically: InfinitePrepend, \
InfiniteAppend, InfinitePart, InfiniteTake, InfiniteDrop, InfiniteFirst, \
InfiniteLast, InfiniteJoin, InfiniteRest, InfiniteMost, InfiniteEqual"
}], "Text",ExpressionUUID->"0f283408-9c15-476c-ab8c-b0e7abb778d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code", "Subsubsection",ExpressionUUID->"6ebeefbd-4857-42fb-a308-27aaa279c47f"],

Cell["Provide one of:", "Text",ExpressionUUID->"14e3781a-a52e-4548-bf74-c0aba980dad1"],

Cell[CellGroupData[{

Cell["\<\
Link to the GitHub: https://github.com/LuisAVasquez/Summer2018Starter \
\>", "Item",ExpressionUUID->"d164cdc3-c8cc-4779-b201-e2e8541cd2b4"],

Cell["\<\
see under \"project-notebooks\" folder for the progressive advance of the \
project\
\>", "Item",ExpressionUUID->"09d6e513-7a41-4a2b-843d-d8e65321a420"],

Cell["\<\
The package \[OpenCurlyDoubleQuote]Infinite Lists\[CloseCurlyDoubleQuote] \
includes the code for all the functions implemented in this project\
\>", "Item",ExpressionUUID->"864499f3-556d-4483-9df9-ed1776be9e06"]
}, Open  ]]
}, Open  ]],

Cell["Written Content / Lesson Plans", "Subsubsection",ExpressionUUID->"ba68b18e-0118-4694-9cc8-e616df451654"],

Cell[CellGroupData[{

Cell["Conclusions in Detail", "Subsubsection",ExpressionUUID->"405e0fe7-2022-4d50-b275-5f85c6659f37"],

Cell["\<\
A lot of the basic WL operations for lists have been successfully implemented \
for infinite lists. Yet, it can be difficult to figure the syntax to use this \
functions.
There are still many inefficient implementations which could be perfected.
The successful work with infinite matrices and Cellular Automata with \
infinite initial conditions suggest that infinite lists are a worthy \
implementation into the Wolfram Language.
\
\>", "Text",ExpressionUUID->"47c1fa70-ba0d-4421-b2c7-f177d7ae726d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["All Visualizations", "Subsubsection",ExpressionUUID->"aa59b7ca-7848-48f1-96cf-6286c1fabb09"],

Cell["\<\
Visualizations are not needed for the project, only for examples.\
\>", "Text",ExpressionUUID->"77c9b215-9a69-441a-baec-cb84366dae1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Sources Links/References", "Subsubsection",ExpressionUUID->"8d03133e-d036-4673-985c-415dd5ec88bb"],

Cell["Does not apply.", "Text",ExpressionUUID->"c124f4ed-6cee-47c9-b991-51ff3c8c2857"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Future Directions", "Subsubsection",ExpressionUUID->"9afe7952-52cb-49e5-812a-edf95df8c363"],

Cell["\<\
- Extend the existing Mathematica functions to work with infinite lists, and \
optimizing these extensions.
- Use infinite lists to implement Turing Machines, Tag Systems, and other \
systems that in principle can accept infinite lists.\
\>", "Text",ExpressionUUID->"3e4cea3d-efdb-4cf6-85cf-4d98c3559736"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Background Info Links/References", "Subsubsection",ExpressionUUID->"19b709dc-5a9b-4a0e-8d93-1058844be4dd"],

Cell["\<\
Some inspiration for this implementations comes from \
Haskell\[CloseCurlyQuote]s treatment of infinite lists. See:
https://wiki.haskell.org/Why_Haskell_matters#Laziness
Hilbert\[CloseCurlyQuote]s Infinite Hotel is a helpful thought experiment for \
understanding the behaviour that infinite sets can have. See:
https://en.wikipedia.org/wiki/Hilbert%27s_paradox_of_the_Grand_Hotel\
\>", "Text",ExpressionUUID->"186f0199-1b9f-465b-bde0-0e2268e8997c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Keywords", "Subsubsection",ExpressionUUID->"6668b03b-4180-4966-b673-b20f85cb5927"],

Cell["Provide keywords as items", "Text",ExpressionUUID->"a5e5e177-980c-46c4-8f4b-7804400a13ff"],

Cell[CellGroupData[{

Cell["Infinite Lists", "Item",ExpressionUUID->"a0f68604-8bfc-4c6d-afb6-b6a38b6de7d0"],

Cell["Infinite Graphs", "Item",ExpressionUUID->"d4791c55-e7db-46a0-8162-0eebcfa1df4d"],

Cell["Infinite Cellular Automata", "Item",ExpressionUUID->"8f8d7844-e0ce-4604-a341-3a00ac3a01fd"],

Cell["Extensions of lists", "Item",ExpressionUUID->"3d4fc6f7-61a1-4e11-92ae-234f7d90afeb"],

Cell["Infinite Arguments", "Item",ExpressionUUID->"c18542fb-369e-46dd-9965-916273da0a22"]
}, Open  ]]
}, Open  ]],

Cell["Other information", "Subsubsection",ExpressionUUID->"5f589531-3a9b-47cd-a487-fcf2f80aa83f"]
}, Open  ]]
},
NotebookEventActions:>{
 "WindowClose" :> 
  Module[{$CellContext`dy, $CellContext`hr, $CellContext`mn}, \
{$CellContext`dy, $CellContext`hr, $CellContext`mn} = Map[(LinkWrite[
         First[$FrontEnd], 
         FrontEnd`Value[#]]; LinkRead[
         First[$FrontEnd]])& , {"DateLong", "Hour", "Minute"}]; 
    NotebookLocate["LastModified"]; NotebookWrite[
      InputNotebook[], 
      Cell[
       TextData[{
        "Last modified on: ", $CellContext`dy, " at ", $CellContext`hr, 
         ":", $CellContext`mn}], "TemplateInstructions", CellTags -> 
       "LastModified", Deployed -> True, Background -> Lighter[Gray, 0.5]]]]},
WindowSize->{812, 661},
WindowMargins->{{-71, Automatic}, {Automatic, 1}},
WindowFrameElements->{"CloseBox"},
DockedCells->Cell[
 "Wolfram Summer School 2018", FontFamily -> "Source Sans Pro", FontSize -> 
  42, FontVariations -> {"CapsType" -> "AllCaps"}, 
  RGBColor[0.25098039215686274`, 0.25098039215686274`, 0.25098039215686274`], 
  Background -> RGBColor[1., 0.807843137254902, 0.2549019607843137]],
TrackCellChangeTimes->False,
Magnification:>1.1 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["TemplateProjectTitle", StyleDefinitions -> StyleData["Title"]],
     CellFrame -> True, CellMargins -> {{25, 20}, {5, 5}}, ShowCellLabel -> 
    True, CellFrameColor -> GrayLevel[0.85]], 
   Cell[
    StyleData["TemplateLabel", StyleDefinitions -> StyleData["Text"]], 
    FontSize -> 14, FontWeight -> Bold, FontColor -> 
    RGBColor[0.25098039215686274`, 0.25098039215686274`, 
      0.25098039215686274`], Background -> None], 
   Cell[
    StyleData["TemplateInstructions", StyleDefinitions -> StyleData["Text"]], 
    Editable -> False, ShowCellBracket -> False, FontSize -> 16], 
   Cell[
    StyleData["TemplateAuthorInfo", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> True, CellMargins -> {{25, 20}, {5, 5}}, ShowCellLabel -> 
    True, CellFrameColor -> GrayLevel[0.85]], 
   Cell[
    StyleData[
    "TemplateSectionHeaders", StyleDefinitions -> StyleData["Section"]], 
    Editable -> False, Selectable -> False, Deletable -> False, 
    ShowCellBracket -> False, Deployed -> True], 
   Cell[
    StyleData[
    "TemplateSectionSubHeaders", StyleDefinitions -> StyleData["Subsection"]],
     Editable -> False, ShowCellBracket -> False], 
   Cell[
    StyleData[
    "TemplateSectionSubSubHeaders", StyleDefinitions -> 
     StyleData["Subsubsection"]], Editable -> False, ShowCellBracket -> 
    False], 
   Cell[
    StyleData[
    "TemplateEditableHeader", StyleDefinitions -> StyleData["Subsubsection"]],
     FontColor -> RGBColor[1., 0.5058823529411764, 0.]], 
   Cell[
    StyleData[
    "TemplateEditableContent", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> True, ShowCellBracket -> False, 
    CellMargins -> {{25, 20}, {5, 5}}, Evaluatable -> False, ShowCellLabel -> 
    True, CellFrameColor -> GrayLevel[0.85]], 
   Cell[
    StyleData[
    "TemplateEditableInput", StyleDefinitions -> StyleData["Input"]], 
    Editable -> True, CellFrame -> True, CellMargins -> {{25, 20}, {5, 5}}, 
    Evaluatable -> True, ShowCellLabel -> True, CellFrameColor -> 
    GrayLevel[0.85]], 
   Cell[
    StyleData["TemplateDivider", StyleDefinitions -> StyleData["Text"]], 
    Editable -> False, Selectable -> False, Deletable -> False, PageWidth -> 
    WindowWidth, CellFrame -> {{False, False}, {8, False}}, ShowCellBracket -> 
    False, CellMargins -> {{0, -10}, {0, 0}}, 
    CellBracketOptions -> {"OverlapContent" -> True}, Deployed -> True, 
    CellFrameMargins -> {{10, 10}, {1, 1}}, CellFrameColor -> 
    RGBColor[1, 0.5, 0], Background -> 
    RGBColor[1., 0.807843137254902, 0.2549019607843137]]}, Visible -> False, 
  FrontEndVersion -> "11.3 for Microsoft Windows (64-bit) (March 6, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "LastModified"->{
  Cell[400, 13, 225, 5, 58, "TemplateInstructions",ExpressionUUID->"034f93bf-27ed-47fa-8658-94c423a379e8",
   CellTags->"LastModified"]},
 "AuthorInfo"->{
  Cell[650, 22, 176, 4, 73, "TemplateSectionHeaders",ExpressionUUID->"47541fce-e5a1-4793-b8e1-e1340b437ca6",
   CellTags->"AuthorInfo"]},
 "PosterContent"->{
  Cell[1673, 52, 190, 4, 73, "TemplateSectionHeaders",ExpressionUUID->"e3c11918-b62c-4e4f-bc19-a4aa32cba637",
   CellTags->"PosterContent"]},
 "PresentationContent"->{
  Cell[34259, 654, 210, 5, 73, "TemplateSectionHeaders",ExpressionUUID->"8e028c0c-7cb5-4cea-9aaf-57044e03e425",
   CellTags->"PresentationContent"]},
 "ProjectNotes"->{
  Cell[64954, 1448, 189, 4, 73, "TemplateSectionHeaders",ExpressionUUID->"d0702cda-4649-4987-a5e2-607be4aa4f6e",
   CellTags->"ProjectNotes"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"LastModified", 77651, 1732},
 {"AuthorInfo", 77806, 1735},
 {"PosterContent", 77964, 1738},
 {"PresentationContent", 78132, 1741},
 {"ProjectNotes", 78301, 1744}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 225, 5, 58, "TemplateInstructions",ExpressionUUID->"034f93bf-27ed-47fa-8658-94c423a379e8",
 CellTags->"LastModified"],
Cell[CellGroupData[{
Cell[650, 22, 176, 4, 73, "TemplateSectionHeaders",ExpressionUUID->"47541fce-e5a1-4793-b8e1-e1340b437ca6",
 CellTags->"AuthorInfo"],
Cell[829, 28, 261, 5, 54, "TemplateAuthorInfo",ExpressionUUID->"2214bf82-cb91-41b2-a79f-ecd872282532"],
Cell[1093, 35, 253, 5, 54, "TemplateAuthorInfo",ExpressionUUID->"1d803eb4-64f6-4601-a1a0-49b5afc9692c"],
Cell[1349, 42, 287, 5, 54, "TemplateAuthorInfo",ExpressionUUID->"f3f2c56d-6554-49c0-a8f0-7c8d2bae5215"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1673, 52, 190, 4, 73, "TemplateSectionHeaders",ExpressionUUID->"e3c11918-b62c-4e4f-bc19-a4aa32cba637",
 CellTags->"PosterContent"],
Cell[1866, 58, 270, 4, 54, "TemplateEditableContent",ExpressionUUID->"16215b85-c481-4f11-8175-b0652d7bbfad"],
Cell[2139, 64, 1691, 37, 316, "TemplateEditableContent",ExpressionUUID->"c662dd0a-9849-40e8-bc89-a9f688107475",
 InitializationCell->True],
Cell[3833, 103, 287, 6, 67, "TemplateInstructions",ExpressionUUID->"ec924e65-f9fc-4678-8fe3-95cd292f053c"],
Cell[4123, 111, 26871, 456, 775, "TemplateEditableContent",ExpressionUUID->"32f16ef4-646e-45ed-a15a-a912cfc9ecd6"],
Cell[30997, 569, 580, 11, 130, "TemplateEditableContent",ExpressionUUID->"ba2205bf-d701-4ef5-aa12-c7a7f1002441"],
Cell[31580, 582, 514, 10, 130, "TemplateEditableContent",ExpressionUUID->"e44105f6-e95a-4d28-9e4d-8a40b3d4e596"],
Cell[32097, 594, 99, 1, 20, "Input",ExpressionUUID->"4a721f19-623c-47ad-bb58-c6de867557f0",
 CellOpen->False],
Cell[32199, 597, 2023, 52, 40, "TemplateDivider",ExpressionUUID->"f97819d1-7e79-4a5e-9921-90745ea05a94"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34259, 654, 210, 5, 73, "TemplateSectionHeaders",ExpressionUUID->"8e028c0c-7cb5-4cea-9aaf-57044e03e425",
 CellTags->"PresentationContent"],
Cell[34472, 661, 1351, 27, 97, "TemplateInstructions",ExpressionUUID->"a415c0fc-f692-474a-a3a1-95fb4df9ef20"],
Cell[CellGroupData[{
Cell[35848, 692, 125, 0, 49, "TemplateEditableHeader",ExpressionUUID->"a82eb68b-c55f-495d-ac5a-d97167784e73"],
Cell[35976, 694, 237, 5, 64, "TemplateEditableContent",ExpressionUUID->"56b47864-14c8-4a9a-89ba-c44c959ed481"],
Cell[36216, 701, 247, 6, 64, "TemplateEditableContent",ExpressionUUID->"1b26b797-093a-4576-b940-30075ca455e9"],
Cell[CellGroupData[{
Cell[36488, 711, 952, 27, 126, "TemplateEditableInput",ExpressionUUID->"2409bf27-2c9c-45af-8774-7a18480bfb95"],
Cell[37443, 740, 348, 9, 36, "Output",ExpressionUUID->"5ea5b50a-3076-4899-8b2d-d94c0caec004"]
}, Open  ]],
Cell[37806, 752, 213, 4, 64, "TemplateEditableContent",ExpressionUUID->"50e2ab33-924e-4422-856b-913a68a559c5"],
Cell[CellGroupData[{
Cell[38044, 760, 718, 22, 82, "TemplateEditableInput",ExpressionUUID->"7235a235-7eb7-41f3-9a40-9d2099542791"],
Cell[38765, 784, 344, 8, 36, "Output",ExpressionUUID->"ff30ec4f-f9d4-4b57-89eb-e8e23a615ee5"],
Cell[39112, 794, 185, 3, 36, "Output",ExpressionUUID->"56a9964f-2570-493e-b1a5-4064f6af0e4a"]
}, Open  ]],
Cell[39312, 800, 248, 6, 64, "TemplateEditableContent",ExpressionUUID->"e6e6e936-631f-4952-9887-6c91bdd7ac0d"],
Cell[CellGroupData[{
Cell[39585, 810, 442, 11, 59, "TemplateEditableInput",ExpressionUUID->"18bdb0de-d0a7-49de-b169-6f483968bf74"],
Cell[40030, 823, 182, 3, 36, "Output",ExpressionUUID->"f3aeaefa-c67f-49fd-88c5-6ae845a66f38"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[40261, 832, 108, 0, 49, "TemplateEditableHeader",ExpressionUUID->"d81a2f92-5f84-4614-aee9-dcb6b7eeac79"],
Cell[40372, 834, 266, 6, 64, "TemplateEditableContent",ExpressionUUID->"23477ba0-6c9e-4f95-8724-06f6fa7e26ea"],
Cell[CellGroupData[{
Cell[40663, 844, 1034, 26, 148, "TemplateEditableInput",ExpressionUUID->"e6c6389e-6c27-45e2-98d2-b9616e2d15e2"],
Cell[41700, 872, 814, 22, 69, "Output",ExpressionUUID->"73937141-e65d-4f43-932f-2b7531b3c8f1"],
Cell[42517, 896, 1082, 26, 107, "Output",ExpressionUUID->"4bd207e9-4e39-4e0d-a5ab-33ee92acc437"]
}, Open  ]],
Cell[43614, 925, 329, 7, 115, "TemplateEditableContent",ExpressionUUID->"4d8b4c02-8b9b-4a8a-a299-0c5e298f67be"],
Cell[CellGroupData[{
Cell[43968, 936, 1030, 28, 148, "TemplateEditableInput",ExpressionUUID->"20197eb1-0a2c-4e3a-a068-01939f0a01f0"],
Cell[45001, 966, 12656, 280, 470, "Output",ExpressionUUID->"ffe90935-707e-4652-9630-e509b3eb0f80"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[57706, 1252, 122, 0, 49, "TemplateEditableHeader",ExpressionUUID->"61810600-9282-48fb-96ce-99ccd72da419"],
Cell[57831, 1254, 311, 7, 115, "TemplateEditableContent",ExpressionUUID->"e97d439e-5954-4a5c-a974-f45fb0428c37"],
Cell[CellGroupData[{
Cell[58167, 1265, 1207, 31, 126, "TemplateEditableInput",ExpressionUUID->"e7a18002-89b1-408e-9a4f-c8f628bdba2d"],
Cell[59377, 1298, 554, 14, 133, "Output",ExpressionUUID->"fec342a1-76e5-4b72-ab47-502635fb1704"]
}, Open  ]],
Cell[59946, 1315, 328, 7, 90, "TemplateEditableContent",ExpressionUUID->"63fbb615-04d3-4733-b50d-dac315658189"],
Cell[60277, 1324, 1471, 39, 347, "TemplateEditableInput",ExpressionUUID->"53b08af9-79c6-4ce8-b2f3-6babfb5ac393"],
Cell[61751, 1365, 99, 1, 20, "Input",ExpressionUUID->"5ddaca3b-16c4-4ddd-a510-a603177f7695",
 CellOpen->False],
Cell[61853, 1368, 3052, 74, 40, "TemplateDivider",ExpressionUUID->"076ddf5c-307b-4320-9bc6-9a3254f2388c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[64954, 1448, 189, 4, 73, "TemplateSectionHeaders",ExpressionUUID->"d0702cda-4649-4987-a5e2-607be4aa4f6e",
 CellTags->"ProjectNotes"],
Cell[CellGroupData[{
Cell[65168, 1456, 102, 0, 49, "Subsubsection",ExpressionUUID->"c1b785be-a60a-40fe-b1f1-2d83590b38cd"],
Cell[65273, 1458, 123, 0, 39, "Text",ExpressionUUID->"8215d1a9-0153-4e24-b3a5-80897879c626"],
Cell[65399, 1460, 271, 7, 32, "Input",ExpressionUUID->"fcfaa886-4c4d-4f7b-8d31-4f5b492eb2d2"],
Cell[65673, 1469, 132, 1, 39, "Text",ExpressionUUID->"47c865f1-e1e9-4c0a-b68b-e1f1e5d55fa7"],
Cell[65808, 1472, 1522, 23, 444, "Text",ExpressionUUID->"82d754bf-3232-45a9-92bd-0f4c60d4c847"],
Cell[67333, 1497, 136, 2, 39, "Text",ExpressionUUID->"9be51f3b-065b-4fd2-a98a-939cc13bf81d"],
Cell[67472, 1501, 2095, 30, 1456, "Text",ExpressionUUID->"0f283408-9c15-476c-ab8c-b0e7abb778d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69604, 1536, 84, 0, 49, "Subsubsection",ExpressionUUID->"6ebeefbd-4857-42fb-a308-27aaa279c47f"],
Cell[69691, 1538, 86, 0, 39, "Text",ExpressionUUID->"14e3781a-a52e-4548-bf74-c0aba980dad1"],
Cell[CellGroupData[{
Cell[69802, 1542, 149, 2, 35, "Item",ExpressionUUID->"d164cdc3-c8cc-4779-b201-e2e8541cd2b4"],
Cell[69954, 1546, 162, 3, 35, "Item",ExpressionUUID->"09d6e513-7a41-4a2b-843d-d8e65321a420"],
Cell[70119, 1551, 222, 3, 35, "Item",ExpressionUUID->"864499f3-556d-4483-9df9-ed1776be9e06"]
}, Open  ]]
}, Open  ]],
Cell[70368, 1558, 110, 0, 49, "Subsubsection",ExpressionUUID->"ba68b18e-0118-4694-9cc8-e616df451654"],
Cell[CellGroupData[{
Cell[70503, 1562, 101, 0, 40, "Subsubsection",ExpressionUUID->"405e0fe7-2022-4d50-b275-5f85c6659f37"],
Cell[70607, 1564, 510, 9, 166, "Text",ExpressionUUID->"47c1fa70-ba0d-4421-b2c7-f177d7ae726d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71154, 1578, 98, 0, 49, "Subsubsection",ExpressionUUID->"aa59b7ca-7848-48f1-96cf-6286c1fabb09"],
Cell[71255, 1580, 144, 2, 39, "Text",ExpressionUUID->"77c9b215-9a69-441a-baec-cb84366dae1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71436, 1587, 109, 0, 49, "Subsubsection",ExpressionUUID->"8d03133e-d036-4673-985c-415dd5ec88bb"],
Cell[71548, 1589, 86, 0, 39, "Text",ExpressionUUID->"c124f4ed-6cee-47c9-b991-51ff3c8c2857"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71671, 1594, 97, 0, 49, "Subsubsection",ExpressionUUID->"9afe7952-52cb-49e5-812a-edf95df8c363"],
Cell[71771, 1596, 315, 5, 115, "Text",ExpressionUUID->"3e4cea3d-efdb-4cf6-85cf-4d98c3559736"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72123, 1606, 112, 0, 49, "Subsubsection",ExpressionUUID->"19b709dc-5a9b-4a0e-8d93-1058844be4dd"],
Cell[72238, 1608, 459, 7, 141, "Text",ExpressionUUID->"186f0199-1b9f-465b-bde0-0e2268e8997c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72734, 1620, 88, 0, 49, "Subsubsection",ExpressionUUID->"6668b03b-4180-4966-b673-b20f85cb5927"],
Cell[72825, 1622, 96, 0, 39, "Text",ExpressionUUID->"a5e5e177-980c-46c4-8f4b-7804400a13ff"],
Cell[CellGroupData[{
Cell[72946, 1626, 85, 0, 35, "Item",ExpressionUUID->"a0f68604-8bfc-4c6d-afb6-b6a38b6de7d0"],
Cell[73034, 1628, 86, 0, 35, "Item",ExpressionUUID->"d4791c55-e7db-46a0-8162-0eebcfa1df4d"],
Cell[73123, 1630, 97, 0, 35, "Item",ExpressionUUID->"8f8d7844-e0ce-4604-a341-3a00ac3a01fd"],
Cell[73223, 1632, 90, 0, 35, "Item",ExpressionUUID->"3d4fc6f7-61a1-4e11-92ae-234f7d90afeb"],
Cell[73316, 1634, 89, 0, 35, "Item",ExpressionUUID->"c18542fb-369e-46dd-9965-916273da0a22"]
}, Open  ]]
}, Open  ]],
Cell[73432, 1638, 97, 0, 49, "Subsubsection",ExpressionUUID->"5f589531-3a9b-47cd-a487-fcf2f80aa83f"]
}, Open  ]]
}
]
*)

